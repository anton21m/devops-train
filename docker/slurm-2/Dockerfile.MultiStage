#  docker build -t w -f Dockerfile.MultiStage .
# Это приложение не может быть скомпилировано, это пример

FROM golang:alpine3.18 AS build

# install tools required for project
# run "docker build --no-cache" to update dependencies
RUN apk add --no-cache git
RUN go get github.com/golang/dep/cmd/dep

# list project dependencies with gopkg.toml and gopkg.lock
# these layers are only re-built when Gopkg files are updates
COPY Gopkg.lock Gopkg.toml /go/src/project/
WORKDIR /go/src/project/

# install library dependencies 
RUN dep ensure -vendor-only

# copy the entire project and build it
# this layer is rebuilt when a file changes in the project directory
COPY . /go/src/project/
RUN go build -o /bin/project

# this results in a single layer image
FROM scratch
COPY --from=build /bin/project /bin project
ENTRYPOINT [ "/bin/project" ]
CMD [ "--help" ]